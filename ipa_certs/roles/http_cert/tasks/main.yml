---
# main tasks for setting up certificates

- name: Set target service name
  set_fact: 
    target_service: "{{ crt_service_type }}/{{ ansible_fqdn }}"

- name: Ensure target service is present
  community.general.ipa_service:
    name: "{{ target_service }}"
    state: present
    ipa_host: "{{ ipa_server_fqdn }}"
    ipa_user: "{{ ipa_principal }}"
    ipa_pass: "{{ ipa_password }}"

- name: Create a secure directory
  ansible.builtin.file:
    path: "{{ crt_dir }}"
    state: directory
    owner: root
    group: root
    mode: 0600

- name: Check for an existing certificate file
  ansible.builtin.stat:
    path: "{{ ssl_crt_path }}"
  register: cert_exists

- name: Cert exists and regen requested
  block:

  - name: Cert exists, regenerating, read existing cert
    ansible.builtin.shell: "sed -n 2,$(expr $(wc -l < {{ ssl_crt_path }}) - 1)p {{ ssl_crt_path }}"
    register: cert

  - name: Cert exists, regenerating, get cert serial number
    ansible.builtin.shell: "echo {{ ipa_password }} | kinit {{ ipa_principal }}; ipa cert-find --certificate='{{ cert.stdout }}' | grep 'Serial number:' | cut -c18-"
    register: serial_num

  - name: Cert exists, regenerating - stop tracking
    ansible.builtin.shell: "echo {{ ipa_password }} | kinit {{ ipa_principal }}; ipa-getcert stop-tracking -k {{ ssl_private_key_path }} -f {{ ssl_crt_path }} -i {{ ansible_fqdn }}"
    ignore_errors: true

  - name: Cert exists, regenerating - remove the old cert from the service
    ansible.builtin.shell: "echo {{ ipa_password }} | kinit {{ ipa_principal }}; ipa service-remove-cert {{ target_service }} --certificate='{{ cert.stdout }}'"
    ignore_errors: true

  - name: Cert exists, revoke the old cert with reason 6 - certificateHold - an admin can completely revoke it later
    ansible.builtin.shell: "echo {{ ipa_password }} | kinit {{ ipa_principal }}; ipa cert-revoke {{ serial_num.stdout_lines.1 }} --revocation-reason=6"
  
  - name: Cert exists, rename old cert .revoked
    ansible.builtin.copy:
      src: "{{ ssl_crt_path }}"
      dest: "{{ ssl_crt_path }}.revoked"
      remote_src: yes
  
  when: cert_exists.stat.exists and force_regen

- name: Generating New Certificate
  block:

  - name: Generate configuration files
    ansible.builtin.shell: "echo {{ ssl_private_key_passphrase }} > {{ passfile }}"

  - ansible.builtin.command: "openssl genrsa -{{ ssl_private_key_cipher }} -out {{ ssl_private_key_pem_path }} -passout file:/{{ passfile }} {{ ssl_private_key_size }}"

  - ansible.builtin.command: "openssl rsa -in {{ ssl_private_key_pem_path }} -out {{ ssl_private_key_path }} -passin file:/{{ passfile }}"

  - name: Create request
    ansible.builtin.command: "openssl req -new -key {{ ssl_private_key_path }} -out {{ csr_path }} -subj \"/C={{ csr_countryName }}/ST={{ csr_stateOrProvinceName }}/L={{ csr_localityName }}/O={{ csr_organizationName }}/OU={{ csr_organizationUnitName }}/CN={{ ansible_fqdn }}/subjectAltName=DNS.1={{ ansible_fqdn }}\""

  - name: Generate the certificate for the service
    ansible.builtin.shell: "echo {{ ipa_password }} | kinit {{ ipa_principal }}; ipa cert-request --add --principal={{ target_service }} {{ csr_path }} --certificate-out={{ ssl_crt_path }}"

  - name: Ensure that certmonger starts-tracking the new certificate for autorenewals
    ansible.builtin.shell: "echo {{ ipa_password }} | kinit {{ ipa_principal }}; ipa-getcert start-tracking -k {{ ssl_private_key_path }} -f {{ ssl_crt_path }} -I {{ ansible_fqdn }}"

  - name: "Create bundle of key and cert"
    ansible.builtin.shell: "cat {{ ssl_crt_path }} > {{ crt_key_bundle_path }}; cat {{ ssl_private_key_path }} >> {{ crt_key_bundle_path }};"

  when: cert_exists.stat.exists == false or force_regen == true
